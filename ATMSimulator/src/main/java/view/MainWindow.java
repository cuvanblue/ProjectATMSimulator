/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

/**
 *
 * @author TOTORO
 */
import com.formdev.flatlaf.FlatLightLaf;
import cuvankhoa.atmsimulator.ATMSimulator;
import java.awt.Toolkit;
import java.sql.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import javax.swing.*;
import model.*;
public class MainWindow extends javax.swing.JFrame {
    int withdrawAmount;
    int transferAmount;
    int enterPincount;
    int[] cash;
    float fee;
    boolean firstTime;
    boolean printBill;
    String newPIN;
    Atm currentAtm;
    Bank currentBank;
    ArrayList<Bank> bank;
    Customer currentCustomer ;
    Customer currentCustomerTrans;
    Connection conn;
    
    public MainWindow(ArrayList<Bank> bank) {
        FlatLightLaf.setup();
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/img/cash.png")));
        this.bank = bank;
        currentAtm = null;
        currentBank = null;
        currentCustomer =null;
        currentCustomerTrans= null;
        withdrawAmount = -1;
        transferAmount = -1;
        enterPincount = 0;
        cash = new int[4];
        cash[0] = -1;cash[1] = -1;cash[2] = -1;cash[3] = -1;
        fee = 0f;
        firstTime = true;
        printBill = false;
        newPIN = "";
        // hien thi danh sach cac atm 
        int stt = 0;
        String status;
        for(Bank i : bank)
        {
            ArrayList<Atm> k = i.getAtm();
            for( Atm j : k)
            {
                
                if(j.isStatus()){
                    status = "";
                }
                else{
                    status = "(error) ";
                }
                stt++;
                ATMSelect.addItem(status + stt + ". ATM "+ j.getOwnerBank() + " "+ j.getAddress() + " " + j.getAtmID());
                if(currentAtm == null ){
                    currentAtm = j;
                    resetATM();
                }
            }
        }
        firstTime = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        ATMSelect = new javax.swing.JComboBox<>();
        insertCard = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        pnCheckPIN = new javax.swing.JPanel();
        txtCheckPIN = new javax.swing.JLabel();
        txtPIN = new javax.swing.JPasswordField();
        btnEnterPIN = new javax.swing.JButton();
        btnCancelPINcheck = new javax.swing.JButton();
        pnMain = new javax.swing.JPanel();
        txtwelcome1 = new javax.swing.JLabel();
        btnCheckbalance = new javax.swing.JButton();
        btnCancel1 = new javax.swing.JButton();
        btnChangepassword = new javax.swing.JButton();
        btnWithdraw = new javax.swing.JButton();
        btnTransfer = new javax.swing.JButton();
        btnStatement = new javax.swing.JButton();
        pnWithdraw1 = new javax.swing.JPanel();
        txtwelcome4 = new javax.swing.JLabel();
        btn100 = new javax.swing.JButton();
        btn1000 = new javax.swing.JButton();
        btnanother = new javax.swing.JButton();
        btn500 = new javax.swing.JButton();
        btn3000 = new javax.swing.JButton();
        btncancel6 = new javax.swing.JButton();
        pnWithdraw2 = new javax.swing.JPanel();
        txtwelcome5 = new javax.swing.JLabel();
        btnprintbill = new javax.swing.JButton();
        btnnobill = new javax.swing.JButton();
        btncancel7 = new javax.swing.JButton();
        pnCheckbalance1 = new javax.swing.JPanel();
        txtwelcome7 = new javax.swing.JLabel();
        btnprintbill1 = new javax.swing.JButton();
        btnnobill1 = new javax.swing.JButton();
        btncancel8 = new javax.swing.JButton();
        pnTransfer1 = new javax.swing.JPanel();
        txtwelcome6 = new javax.swing.JLabel();
        btnenterpassword1 = new javax.swing.JButton();
        btncancel5 = new javax.swing.JButton();
        txtwelcome8 = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        txtCardnumber = new javax.swing.JTextField();
        pnTransfer2 = new javax.swing.JPanel();
        txtwelcome9 = new javax.swing.JLabel();
        btnprintbill2 = new javax.swing.JButton();
        btnnobill2 = new javax.swing.JButton();
        btncancel9 = new javax.swing.JButton();
        pnStatement = new javax.swing.JPanel();
        txtwelcome10 = new javax.swing.JLabel();
        btnprintbill3 = new javax.swing.JButton();
        btnnobill3 = new javax.swing.JButton();
        btncancel10 = new javax.swing.JButton();
        pnChangePIN = new javax.swing.JPanel();
        txtwelcome11 = new javax.swing.JLabel();
        btnChangePIN = new javax.swing.JButton();
        btncancel11 = new javax.swing.JButton();
        txtwelcome12 = new javax.swing.JLabel();
        txtwelcome13 = new javax.swing.JLabel();
        txtOldPIN = new javax.swing.JPasswordField();
        txtNewPIN1 = new javax.swing.JPasswordField();
        txtNewPIN2 = new javax.swing.JPasswordField();
        pnContinue = new javax.swing.JPanel();
        txtwelcome14 = new javax.swing.JLabel();
        btnYes = new javax.swing.JButton();
        btnNo = new javax.swing.JButton();
        pnChangePIN1 = new javax.swing.JPanel();
        txtwelcome15 = new javax.swing.JLabel();
        btnprintbill4 = new javax.swing.JButton();
        btnnobill4 = new javax.swing.JButton();
        btncancel12 = new javax.swing.JButton();
        bankBanner = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ATM Simulator");
        setMaximumSize(null);
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setMaximumSize(null);
        jPanel1.setOpaque(false);

        ATMSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ATMSelectActionPerformed(evt);
            }
        });

        insertCard.setContentAreaFilled(false);
        insertCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertCardActionPerformed(evt);
            }
        });

        jPanel2.setOpaque(false);
        jPanel2.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                jPanel2HierarchyChanged(evt);
            }
        });
        jPanel2.setLayout(new java.awt.GridBagLayout());

        pnCheckPIN.setOpaque(false);
        pnCheckPIN.setPreferredSize(new java.awt.Dimension(480, 369));

        txtCheckPIN.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        txtCheckPIN.setText("Xin chào Cù Văn Khoa, vui lòng nhập mã PIN:");

        txtPIN.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        btnEnterPIN.setBackground(new java.awt.Color(51, 51, 255));
        btnEnterPIN.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnEnterPIN.setForeground(new java.awt.Color(255, 255, 255));
        btnEnterPIN.setText("Enter");
        btnEnterPIN.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEnterPIN.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnEnterPIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnterPINActionPerformed(evt);
            }
        });

        btnCancelPINcheck.setBackground(new java.awt.Color(51, 51, 255));
        btnCancelPINcheck.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnCancelPINcheck.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelPINcheck.setText("Cancel");
        btnCancelPINcheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnCancelPINcheck.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnCancelPINcheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelPINcheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnCheckPINLayout = new javax.swing.GroupLayout(pnCheckPIN);
        pnCheckPIN.setLayout(pnCheckPINLayout);
        pnCheckPINLayout.setHorizontalGroup(
            pnCheckPINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCheckPINLayout.createSequentialGroup()
                .addContainerGap(84, Short.MAX_VALUE)
                .addGroup(pnCheckPINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCheckPINLayout.createSequentialGroup()
                        .addComponent(txtPIN, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(173, 173, 173))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCheckPINLayout.createSequentialGroup()
                        .addComponent(btnEnterPIN, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCheckPINLayout.createSequentialGroup()
                        .addComponent(btnCancelPINcheck, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCheckPINLayout.createSequentialGroup()
                        .addComponent(txtCheckPIN)
                        .addGap(82, 82, 82))))
        );
        pnCheckPINLayout.setVerticalGroup(
            pnCheckPINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCheckPINLayout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(txtCheckPIN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtPIN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 136, Short.MAX_VALUE)
                .addComponent(btnEnterPIN, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancelPINcheck, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(pnCheckPIN, gridBagConstraints);

        pnMain.setOpaque(false);
        pnMain.setPreferredSize(new java.awt.Dimension(480, 369));

        txtwelcome1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtwelcome1.setText("Quý khách vui lòng chọn giao dịch");

        btnCheckbalance.setBackground(new java.awt.Color(51, 51, 255));
        btnCheckbalance.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnCheckbalance.setForeground(new java.awt.Color(255, 255, 255));
        btnCheckbalance.setText("Vấn tin ");
        btnCheckbalance.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnCheckbalance.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnCheckbalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckbalanceActionPerformed(evt);
            }
        });

        btnCancel1.setBackground(new java.awt.Color(51, 51, 255));
        btnCancel1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnCancel1.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel1.setText("Cancel");
        btnCancel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnCancel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnCancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancel1ActionPerformed(evt);
            }
        });

        btnChangepassword.setBackground(new java.awt.Color(51, 51, 255));
        btnChangepassword.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnChangepassword.setForeground(new java.awt.Color(255, 255, 255));
        btnChangepassword.setText("Đổi mật khẩu");
        btnChangepassword.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnChangepassword.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnChangepassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangepasswordActionPerformed(evt);
            }
        });

        btnWithdraw.setBackground(new java.awt.Color(51, 51, 255));
        btnWithdraw.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnWithdraw.setForeground(new java.awt.Color(255, 255, 255));
        btnWithdraw.setText("Rút tiền");
        btnWithdraw.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnWithdraw.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnWithdraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWithdrawActionPerformed(evt);
            }
        });

        btnTransfer.setBackground(new java.awt.Color(51, 51, 255));
        btnTransfer.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnTransfer.setForeground(new java.awt.Color(255, 255, 255));
        btnTransfer.setText("Chuyển khoản");
        btnTransfer.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnTransfer.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnTransfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransferActionPerformed(evt);
            }
        });

        btnStatement.setBackground(new java.awt.Color(51, 51, 255));
        btnStatement.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnStatement.setForeground(new java.awt.Color(255, 255, 255));
        btnStatement.setText("Sao kê");
        btnStatement.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnStatement.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnStatement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStatementActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnMainLayout = new javax.swing.GroupLayout(pnMain);
        pnMain.setLayout(pnMainLayout);
        pnMainLayout.setHorizontalGroup(
            pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnMainLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(txtwelcome1)
                        .addGap(94, 94, 94))
                    .addGroup(pnMainLayout.createSequentialGroup()
                        .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnWithdraw, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnStatement, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                        .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCheckbalance, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnChangepassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        pnMainLayout.setVerticalGroup(
            pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMainLayout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(txtwelcome1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnMainLayout.createSequentialGroup()
                        .addComponent(btnWithdraw, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnStatement, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnMainLayout.createSequentialGroup()
                        .addComponent(btnCheckbalance, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnChangepassword, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(pnMain, gridBagConstraints);

        pnWithdraw1.setOpaque(false);
        pnWithdraw1.setPreferredSize(new java.awt.Dimension(480, 369));

        txtwelcome4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtwelcome4.setText("Vui lòng nhập số tiền");

        btn100.setBackground(new java.awt.Color(51, 51, 255));
        btn100.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btn100.setForeground(new java.awt.Color(255, 255, 255));
        btn100.setText("100.000");
        btn100.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btn100.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btn100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn100ActionPerformed(evt);
            }
        });

        btn1000.setBackground(new java.awt.Color(51, 51, 255));
        btn1000.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btn1000.setForeground(new java.awt.Color(255, 255, 255));
        btn1000.setText("1.000.000");
        btn1000.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btn1000.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btn1000.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn1000ActionPerformed(evt);
            }
        });

        btnanother.setBackground(new java.awt.Color(51, 51, 255));
        btnanother.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnanother.setForeground(new java.awt.Color(255, 255, 255));
        btnanother.setText("Số khác");
        btnanother.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnanother.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnanother.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnanotherActionPerformed(evt);
            }
        });

        btn500.setBackground(new java.awt.Color(51, 51, 255));
        btn500.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btn500.setForeground(new java.awt.Color(255, 255, 255));
        btn500.setText("500.000");
        btn500.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btn500.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btn500.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn500ActionPerformed(evt);
            }
        });

        btn3000.setBackground(new java.awt.Color(51, 51, 255));
        btn3000.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btn3000.setForeground(new java.awt.Color(255, 255, 255));
        btn3000.setText("3.000.000");
        btn3000.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btn3000.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btn3000.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn3000ActionPerformed(evt);
            }
        });

        btncancel6.setBackground(new java.awt.Color(51, 51, 255));
        btncancel6.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btncancel6.setForeground(new java.awt.Color(255, 255, 255));
        btncancel6.setText("Cancel");
        btncancel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btncancel6.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btncancel6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancel6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnWithdraw1Layout = new javax.swing.GroupLayout(pnWithdraw1);
        pnWithdraw1.setLayout(pnWithdraw1Layout);
        pnWithdraw1Layout.setHorizontalGroup(
            pnWithdraw1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnWithdraw1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnWithdraw1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnanother, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn1000, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn100, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addGroup(pnWithdraw1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btncancel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn3000, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn500, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(pnWithdraw1Layout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(txtwelcome4)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnWithdraw1Layout.setVerticalGroup(
            pnWithdraw1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnWithdraw1Layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(txtwelcome4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                .addGroup(pnWithdraw1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnWithdraw1Layout.createSequentialGroup()
                        .addComponent(btn500, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn3000, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btncancel6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnWithdraw1Layout.createSequentialGroup()
                        .addComponent(btn100, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn1000, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(btnanother, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(pnWithdraw1, gridBagConstraints);

        pnWithdraw2.setOpaque(false);
        pnWithdraw2.setPreferredSize(new java.awt.Dimension(480, 369));

        txtwelcome5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtwelcome5.setText("Bạn có muốn in hóa đơn không?");

        btnprintbill.setBackground(new java.awt.Color(51, 51, 255));
        btnprintbill.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnprintbill.setForeground(new java.awt.Color(255, 255, 255));
        btnprintbill.setText("Có");
        btnprintbill.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnprintbill.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnprintbill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprintbillActionPerformed(evt);
            }
        });

        btnnobill.setBackground(new java.awt.Color(51, 51, 255));
        btnnobill.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnnobill.setForeground(new java.awt.Color(255, 255, 255));
        btnnobill.setText("Không");
        btnnobill.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnnobill.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnnobill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnobillActionPerformed(evt);
            }
        });

        btncancel7.setBackground(new java.awt.Color(51, 51, 255));
        btncancel7.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btncancel7.setForeground(new java.awt.Color(255, 255, 255));
        btncancel7.setText("Cancel");
        btncancel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btncancel7.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btncancel7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancel7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnWithdraw2Layout = new javax.swing.GroupLayout(pnWithdraw2);
        pnWithdraw2.setLayout(pnWithdraw2Layout);
        pnWithdraw2Layout.setHorizontalGroup(
            pnWithdraw2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnWithdraw2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnWithdraw2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btncancel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnnobill, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnprintbill, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(pnWithdraw2Layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(txtwelcome5)
                .addContainerGap(109, Short.MAX_VALUE))
        );
        pnWithdraw2Layout.setVerticalGroup(
            pnWithdraw2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnWithdraw2Layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(txtwelcome5)
                .addGap(126, 126, 126)
                .addComponent(btnprintbill, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnnobill, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(btncancel7, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(pnWithdraw2, gridBagConstraints);

        pnCheckbalance1.setOpaque(false);
        pnCheckbalance1.setPreferredSize(new java.awt.Dimension(480, 369));

        txtwelcome7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtwelcome7.setText("Bạn có muốn in hóa đơn không?");

        btnprintbill1.setBackground(new java.awt.Color(51, 51, 255));
        btnprintbill1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnprintbill1.setForeground(new java.awt.Color(255, 255, 255));
        btnprintbill1.setText("Có");
        btnprintbill1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnprintbill1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnprintbill1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprintbill1ActionPerformed(evt);
            }
        });

        btnnobill1.setBackground(new java.awt.Color(51, 51, 255));
        btnnobill1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnnobill1.setForeground(new java.awt.Color(255, 255, 255));
        btnnobill1.setText("Không");
        btnnobill1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnnobill1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnnobill1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnobill1ActionPerformed(evt);
            }
        });

        btncancel8.setBackground(new java.awt.Color(51, 51, 255));
        btncancel8.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btncancel8.setForeground(new java.awt.Color(255, 255, 255));
        btncancel8.setText("Cancel");
        btncancel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btncancel8.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btncancel8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancel8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnCheckbalance1Layout = new javax.swing.GroupLayout(pnCheckbalance1);
        pnCheckbalance1.setLayout(pnCheckbalance1Layout);
        pnCheckbalance1Layout.setHorizontalGroup(
            pnCheckbalance1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCheckbalance1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnCheckbalance1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btncancel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnnobill1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnprintbill1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(pnCheckbalance1Layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(txtwelcome7)
                .addContainerGap(109, Short.MAX_VALUE))
        );
        pnCheckbalance1Layout.setVerticalGroup(
            pnCheckbalance1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCheckbalance1Layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(txtwelcome7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                .addComponent(btnprintbill1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnnobill1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btncancel8, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(pnCheckbalance1, gridBagConstraints);

        pnTransfer1.setOpaque(false);
        pnTransfer1.setPreferredSize(new java.awt.Dimension(480, 369));

        txtwelcome6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtwelcome6.setText("Vui lòng nhập số thẻ người nhận");

        btnenterpassword1.setBackground(new java.awt.Color(51, 51, 255));
        btnenterpassword1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnenterpassword1.setForeground(new java.awt.Color(255, 255, 255));
        btnenterpassword1.setText("Enter");
        btnenterpassword1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnenterpassword1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnenterpassword1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnenterpassword1ActionPerformed(evt);
            }
        });

        btncancel5.setBackground(new java.awt.Color(51, 51, 255));
        btncancel5.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btncancel5.setForeground(new java.awt.Color(255, 255, 255));
        btncancel5.setText("Cancel");
        btncancel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btncancel5.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btncancel5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancel5ActionPerformed(evt);
            }
        });

        txtwelcome8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtwelcome8.setText("Vui lòng nhập số tiền");

        txtAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAmountActionPerformed(evt);
            }
        });

        txtCardnumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCardnumberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnTransfer1Layout = new javax.swing.GroupLayout(pnTransfer1);
        pnTransfer1.setLayout(pnTransfer1Layout);
        pnTransfer1Layout.setHorizontalGroup(
            pnTransfer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTransfer1Layout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addGroup(pnTransfer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnTransfer1Layout.createSequentialGroup()
                        .addComponent(btnenterpassword1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnTransfer1Layout.createSequentialGroup()
                        .addComponent(btncancel5, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnTransfer1Layout.createSequentialGroup()
                        .addComponent(txtwelcome6)
                        .addGap(105, 105, 105))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnTransfer1Layout.createSequentialGroup()
                        .addGroup(pnTransfer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtwelcome8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtAmount)
                            .addComponent(txtCardnumber))
                        .addGap(152, 152, 152))))
        );
        pnTransfer1Layout.setVerticalGroup(
            pnTransfer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTransfer1Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(txtwelcome6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCardnumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(txtwelcome8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addComponent(btnenterpassword1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btncancel5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(pnTransfer1, gridBagConstraints);

        pnTransfer2.setOpaque(false);
        pnTransfer2.setPreferredSize(new java.awt.Dimension(480, 369));

        txtwelcome9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtwelcome9.setText("Bạn có muốn in hóa đơn không?");

        btnprintbill2.setBackground(new java.awt.Color(51, 51, 255));
        btnprintbill2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnprintbill2.setForeground(new java.awt.Color(255, 255, 255));
        btnprintbill2.setText("Có");
        btnprintbill2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnprintbill2.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnprintbill2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprintbill2ActionPerformed(evt);
            }
        });

        btnnobill2.setBackground(new java.awt.Color(51, 51, 255));
        btnnobill2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnnobill2.setForeground(new java.awt.Color(255, 255, 255));
        btnnobill2.setText("Không");
        btnnobill2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnnobill2.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnnobill2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnobill2ActionPerformed(evt);
            }
        });

        btncancel9.setBackground(new java.awt.Color(51, 51, 255));
        btncancel9.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btncancel9.setForeground(new java.awt.Color(255, 255, 255));
        btncancel9.setText("Cancel");
        btncancel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btncancel9.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btncancel9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancel9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnTransfer2Layout = new javax.swing.GroupLayout(pnTransfer2);
        pnTransfer2.setLayout(pnTransfer2Layout);
        pnTransfer2Layout.setHorizontalGroup(
            pnTransfer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTransfer2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnTransfer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btncancel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnnobill2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnprintbill2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(pnTransfer2Layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(txtwelcome9)
                .addContainerGap(109, Short.MAX_VALUE))
        );
        pnTransfer2Layout.setVerticalGroup(
            pnTransfer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTransfer2Layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(txtwelcome9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                .addComponent(btnprintbill2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnnobill2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btncancel9, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(pnTransfer2, gridBagConstraints);

        pnStatement.setOpaque(false);
        pnStatement.setPreferredSize(new java.awt.Dimension(480, 369));

        txtwelcome10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtwelcome10.setText("Bạn có muốn in hóa đơn không?");

        btnprintbill3.setBackground(new java.awt.Color(51, 51, 255));
        btnprintbill3.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnprintbill3.setForeground(new java.awt.Color(255, 255, 255));
        btnprintbill3.setText("Có");
        btnprintbill3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnprintbill3.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnprintbill3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprintbill3ActionPerformed(evt);
            }
        });

        btnnobill3.setBackground(new java.awt.Color(51, 51, 255));
        btnnobill3.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnnobill3.setForeground(new java.awt.Color(255, 255, 255));
        btnnobill3.setText("Không");
        btnnobill3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnnobill3.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnnobill3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnobill3ActionPerformed(evt);
            }
        });

        btncancel10.setBackground(new java.awt.Color(51, 51, 255));
        btncancel10.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btncancel10.setForeground(new java.awt.Color(255, 255, 255));
        btncancel10.setText("Cancel");
        btncancel10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btncancel10.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btncancel10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancel10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnStatementLayout = new javax.swing.GroupLayout(pnStatement);
        pnStatement.setLayout(pnStatementLayout);
        pnStatementLayout.setHorizontalGroup(
            pnStatementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnStatementLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnStatementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btncancel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnnobill3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnprintbill3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(pnStatementLayout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(txtwelcome10)
                .addContainerGap(109, Short.MAX_VALUE))
        );
        pnStatementLayout.setVerticalGroup(
            pnStatementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnStatementLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(txtwelcome10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                .addComponent(btnprintbill3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnnobill3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btncancel10, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(pnStatement, gridBagConstraints);

        pnChangePIN.setOpaque(false);
        pnChangePIN.setPreferredSize(new java.awt.Dimension(480, 369));

        txtwelcome11.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtwelcome11.setText("PIN cũ:");

        btnChangePIN.setBackground(new java.awt.Color(51, 51, 255));
        btnChangePIN.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnChangePIN.setForeground(new java.awt.Color(255, 255, 255));
        btnChangePIN.setText("Enter");
        btnChangePIN.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnChangePIN.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnChangePIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangePINActionPerformed(evt);
            }
        });

        btncancel11.setBackground(new java.awt.Color(51, 51, 255));
        btncancel11.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btncancel11.setForeground(new java.awt.Color(255, 255, 255));
        btncancel11.setText("Cancel");
        btncancel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btncancel11.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btncancel11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancel11ActionPerformed(evt);
            }
        });

        txtwelcome12.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtwelcome12.setText("PIN mới:");

        txtwelcome13.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtwelcome13.setText("PIN mới:");

        javax.swing.GroupLayout pnChangePINLayout = new javax.swing.GroupLayout(pnChangePIN);
        pnChangePIN.setLayout(pnChangePINLayout);
        pnChangePINLayout.setHorizontalGroup(
            pnChangePINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnChangePINLayout.createSequentialGroup()
                .addContainerGap(142, Short.MAX_VALUE)
                .addGroup(pnChangePINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnChangePINLayout.createSequentialGroup()
                        .addGroup(pnChangePINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnChangePIN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btncancel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnChangePINLayout.createSequentialGroup()
                        .addGroup(pnChangePINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtwelcome12)
                            .addComponent(txtwelcome11)
                            .addComponent(txtwelcome13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnChangePINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtOldPIN)
                            .addComponent(txtNewPIN2)
                            .addComponent(txtNewPIN1, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))
                        .addGap(138, 138, 138))))
        );
        pnChangePINLayout.setVerticalGroup(
            pnChangePINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnChangePINLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(pnChangePINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtwelcome11)
                    .addComponent(txtOldPIN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnChangePINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtwelcome12)
                    .addComponent(txtNewPIN1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnChangePINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtwelcome13)
                    .addComponent(txtNewPIN2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                .addComponent(btnChangePIN, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btncancel11, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(pnChangePIN, gridBagConstraints);

        pnContinue.setOpaque(false);
        pnContinue.setPreferredSize(new java.awt.Dimension(480, 369));

        txtwelcome14.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtwelcome14.setText("Bạn có muốn tiếp tục giao dịch không?");

        btnYes.setBackground(new java.awt.Color(51, 51, 255));
        btnYes.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnYes.setForeground(new java.awt.Color(255, 255, 255));
        btnYes.setText("Có");
        btnYes.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnYes.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnYesActionPerformed(evt);
            }
        });

        btnNo.setBackground(new java.awt.Color(51, 51, 255));
        btnNo.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnNo.setForeground(new java.awt.Color(255, 255, 255));
        btnNo.setText("Không");
        btnNo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnNo.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnContinueLayout = new javax.swing.GroupLayout(pnContinue);
        pnContinue.setLayout(pnContinueLayout);
        pnContinueLayout.setHorizontalGroup(
            pnContinueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnContinueLayout.createSequentialGroup()
                .addContainerGap(88, Short.MAX_VALUE)
                .addGroup(pnContinueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnContinueLayout.createSequentialGroup()
                        .addGroup(pnContinueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnYes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnContinueLayout.createSequentialGroup()
                        .addComponent(txtwelcome14)
                        .addGap(74, 74, 74))))
        );
        pnContinueLayout.setVerticalGroup(
            pnContinueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnContinueLayout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(txtwelcome14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 167, Short.MAX_VALUE)
                .addComponent(btnYes, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnNo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(pnContinue, gridBagConstraints);

        pnChangePIN1.setOpaque(false);
        pnChangePIN1.setPreferredSize(new java.awt.Dimension(480, 369));

        txtwelcome15.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtwelcome15.setText("Bạn có muốn in hóa đơn không?");

        btnprintbill4.setBackground(new java.awt.Color(51, 51, 255));
        btnprintbill4.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnprintbill4.setForeground(new java.awt.Color(255, 255, 255));
        btnprintbill4.setText("Có");
        btnprintbill4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnprintbill4.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnprintbill4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprintbill4ActionPerformed(evt);
            }
        });

        btnnobill4.setBackground(new java.awt.Color(51, 51, 255));
        btnnobill4.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnnobill4.setForeground(new java.awt.Color(255, 255, 255));
        btnnobill4.setText("Không");
        btnnobill4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnnobill4.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnnobill4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnobill4ActionPerformed(evt);
            }
        });

        btncancel12.setBackground(new java.awt.Color(51, 51, 255));
        btncancel12.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btncancel12.setForeground(new java.awt.Color(255, 255, 255));
        btncancel12.setText("Cancel");
        btncancel12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btncancel12.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btncancel12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancel12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnChangePIN1Layout = new javax.swing.GroupLayout(pnChangePIN1);
        pnChangePIN1.setLayout(pnChangePIN1Layout);
        pnChangePIN1Layout.setHorizontalGroup(
            pnChangePIN1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnChangePIN1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnChangePIN1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btncancel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnnobill4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnprintbill4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(pnChangePIN1Layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(txtwelcome15)
                .addContainerGap(112, Short.MAX_VALUE))
        );
        pnChangePIN1Layout.setVerticalGroup(
            pnChangePIN1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnChangePIN1Layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(txtwelcome15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                .addComponent(btnprintbill4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnnobill4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btncancel12, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(pnChangePIN1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(bankBanner, gridBagConstraints);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(ATMSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(437, 437, 437)
                        .addComponent(insertCard, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(60, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(60, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(ATMSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(667, 667, 667)
                .addComponent(insertCard, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(51, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(360, Short.MAX_VALUE)))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jPanel1, gridBagConstraints);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/thietkeATM.png"))); // NOI18N
        jLabel1.setLabelFor(ATMSelect);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jLabel1, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ATMSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ATMSelectActionPerformed
        // TODO add your handling code here:
        if(currentCustomer!=null)
        {
            JOptionPane.showMessageDialog(this, "Bạn nhận được thẻ ATM: "+
            currentCustomer.getName()+" "+ currentCustomer.getAtmCardnumber());
            resetATM();
        }
        if(!firstTime){
            String selectedATM = ATMSelect.getSelectedItem().toString();
            if(selectedATM.contains("error")){
                JOptionPane.showMessageDialog(this, 
                                                                                    "Please select another ATM!", 
                                                                                    "Alert!", 
                                                                                    JOptionPane.INFORMATION_MESSAGE);}
                
                for( Bank i : bank)
                {
                    for( Atm k : i.getAtm())
                    {
                        if(selectedATM.contains(k.getAtmID()))
                        {
                            currentAtm = k;
                            resetATM();
                           if(currentAtm.getOwnerBank().equals("TPBank")){
                           bankBanner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/tpbankbanner.png")));}
                           if(currentAtm.getOwnerBank().equals("BIDV")){
                               bankBanner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/bidvbanner.png")));}
                           if(currentAtm.getOwnerBank().equals("Agribank")){
                               bankBanner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/agribankbanner.png")));}
                            JOptionPane.showMessageDialog(this, 
                                                                                    "ATM selected!", 
                                                                                    "Alert!", 
                                                                                    JOptionPane.INFORMATION_MESSAGE);
                            break;
                        }
                    }
                }
            
        }
    }//GEN-LAST:event_ATMSelectActionPerformed

    private void insertCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertCardActionPerformed
       if(currentAtm.isStatus()){
            InsertCardForm a = new InsertCardForm(this, rootPaneCheckingEnabled, bank);
            a.setVisible(true);
       }
    }//GEN-LAST:event_insertCardActionPerformed

    private void btnCheckbalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckbalanceActionPerformed
        this.pnCheckbalance1.setVisible(true);
        this.pnMain.setVisible(false);
    }//GEN-LAST:event_btnCheckbalanceActionPerformed

    private void btnTransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransferActionPerformed
        this.pnTransfer1.setVisible(true);
        this.pnMain.setVisible(false);
    }//GEN-LAST:event_btnTransferActionPerformed

    private void btnanotherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnanotherActionPerformed
        WithdrawAmountForm a = new WithdrawAmountForm(this, rootPaneCheckingEnabled);
        a.setVisible(true);
    }//GEN-LAST:event_btnanotherActionPerformed

    private void txtCardnumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCardnumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCardnumberActionPerformed

    private void txtAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAmountActionPerformed

    private void jPanel2HierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jPanel2HierarchyChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel2HierarchyChanged

    private void btnCancelPINcheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelPINcheckActionPerformed
        // dang xuat khach hang
        txtPIN.setText("");
        JOptionPane.showMessageDialog(this, "Bạn nhận được thẻ ATM: "+
            currentCustomer.getName()+" "+ currentCustomer.getAtmCardnumber());
        resetATM();
    }//GEN-LAST:event_btnCancelPINcheckActionPerformed

    private void btnEnterPINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnterPINActionPerformed
        if(reloadData()){
            String PIN = String.valueOf(txtPIN.getPassword());
            if(this.currentCustomer.getAtmPin().equals(PIN)){
                enterPincount = 0;
                pnMain.setVisible(true);
                pnCheckPIN.setVisible(false);
                txtPIN.setText("");
            }
            else{
                JOptionPane.showMessageDialog(pnCheckPIN, "Sai mã PIN!");
                txtPIN.setText("");
                enterPincount++;
                if(enterPincount==5){
                    JOptionPane.showMessageDialog(pnCheckPIN, "Tài khoản bị khóa do nhập sai mã PIN quá 5 lần");
                    this.currentCustomer.setAtmStatus(false);
                    updateCustomer(currentCustomer);
                    txtPIN.setText("");
                    enterPincount = 0;
                    JOptionPane.showMessageDialog(this, "Bạn nhận được thẻ ATM: "+
                    currentCustomer.getName()+" "+ currentCustomer.getAtmCardnumber());
                    resetATM();
                }
            }
        }
    }//GEN-LAST:event_btnEnterPINActionPerformed

    private void btnCancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancel1ActionPerformed
        JOptionPane.showMessageDialog(this, "Bạn nhận được thẻ ATM: "+
            currentCustomer.getName()+" "+ currentCustomer.getAtmCardnumber());
        txtPIN.setText("");
        resetATM();      
    }//GEN-LAST:event_btnCancel1ActionPerformed

    private void btnWithdrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWithdrawActionPerformed
        this.pnWithdraw1.setVisible(true);
        this.pnMain.setVisible(false);
    }//GEN-LAST:event_btnWithdrawActionPerformed

    private void btnStatementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStatementActionPerformed
        this.pnStatement.setVisible(true);
        this.pnMain.setVisible(false);
    }//GEN-LAST:event_btnStatementActionPerformed

    private void btncancel6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancel6ActionPerformed
        this.pnWithdraw1.setVisible(false);
        this.pnMain.setVisible(true);
    }//GEN-LAST:event_btncancel6ActionPerformed

    private void btn100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn100ActionPerformed
        applyWithdrawAmount(100000);
    }//GEN-LAST:event_btn100ActionPerformed

    private void btn500ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn500ActionPerformed
        applyWithdrawAmount(500000);
    }//GEN-LAST:event_btn500ActionPerformed

    private void btn1000ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn1000ActionPerformed
        applyWithdrawAmount(1000000);
    }//GEN-LAST:event_btn1000ActionPerformed

    private void btn3000ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn3000ActionPerformed
        applyWithdrawAmount(3000000);
    }//GEN-LAST:event_btn3000ActionPerformed

    private void btncancel7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancel7ActionPerformed
        this.pnMain.setVisible(true);
        this.pnWithdraw2.setVisible(false);
        withdrawAmount = -1;
        cash[0] = -1;cash[1] = -1;cash[2] = -1;cash[3] = -1;
        fee = 0f;
    }//GEN-LAST:event_btncancel7ActionPerformed
// hàm thực thi rút tiền
    private void btnprintbillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprintbillActionPerformed
        if(reloadData()){
            if(currentCustomer.getBalance() >= (this.withdrawAmount + (int)fee + 50000)){
                printBill = true;
                if(this.currentCustomer.getBalance() >= ( withdrawAmount + (int)fee + 51500)){
                    long currentBalance = this.currentCustomer.getBalance() - this.withdrawAmount - (int)fee -1500;  
                    this.currentCustomer.setBalance(currentBalance);   // tru tien khach
                    int currentBalanceATM = this.currentAtm.getCash() - this.withdrawAmount;
                    this.currentAtm.setCash(currentBalanceATM);    // tru tien ATM
                    this.currentAtm.setQuanity50(this.currentAtm.getQuanity50()-cash[0]);// tru luong tien ATM
                    this.currentAtm.setQuanity100(this.currentAtm.getQuanity100()-cash[1]);
                    this.currentAtm.setQuanity200(this.currentAtm.getQuanity200()-cash[2]);
                    this.currentAtm.setQuanity500(this.currentAtm.getQuanity500()-cash[3]);
                    // tao giao dich withdraw
                    int transQuanity=1;
                    for(Bank i : bank)
                    {
                        for(Atm k : i.getAtm())
                        {
                            for(WithdrawTransaction j: k.getWithdrawTransactions())
                            {
                                if(j.getAtmcardnumber().equals(currentCustomer.getAtmCardnumber()))
                                    transQuanity++;
                            }
                        }
                    }
                    String TransID = currentCustomer.getIdCard()+"with"+transQuanity;
                    String TransTime = LocalDateTime.now().getDayOfMonth() + "-" + LocalDateTime.now().getMonth()+ "-" +LocalDateTime.now().getYear()+ " "
                                                    + LocalDateTime.now().getHour()+ ":" +LocalDateTime.now().getMinute()+ ":" +LocalDateTime.now().getSecond();
                    String TransContent = "Thẻ "+ this.currentCustomer.getAtmCardnumber() +" rút: " + withdrawAmount +  " VND vào lúc "+ TransTime +". Phí in hóa đơn: 1.500VNĐ"+ "@" ;
                    WithdrawTransaction a = new WithdrawTransaction(this.currentAtm.getAtmID(), TransID, this.currentCustomer.getAtmCardnumber(), 
                                                                                                                                                        TransTime, withdrawAmount, TransContent );
                    currentAtm.getWithdrawTransactions().add(a);
                    addWithdrawTrans(a);
                    updateATM(this.currentAtm);
                    updateCustomer(currentCustomer);
                    ReceiveForm receiveForm = new  ReceiveForm(this, rootPaneCheckingEnabled, "withdraw");   
                    receiveForm.setVisible(true);    // hien thi ket qua kem bill    
                    pnWithdraw2.setVisible(false);
                }else
                {
                    JOptionPane.showMessageDialog(this, "Tài khoản không đủ tiền để in hóa đơn!");
                }
        }else{
                JOptionPane.showMessageDialog(this, "Số dư còn lại không đủ!");
                this.pnMain.setVisible(true);
                this.pnWithdraw2.setVisible(false);
                withdrawAmount = -1;
                cash[0] = -1;cash[1] = -1;cash[2] = -1;cash[3] = -1;
        fee = 0f;
            }
        }
    }//GEN-LAST:event_btnprintbillActionPerformed

    private void btnnobillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnobillActionPerformed
        if(reloadData()){
            if(currentCustomer.getBalance() >= (this.withdrawAmount + (int)fee + 50000)){
                printBill = false;
                long currentBalance = this.currentCustomer.getBalance() - this.withdrawAmount - (int)fee;  
                this.currentCustomer.setBalance(currentBalance);   // tru tien khach
                int currentBalanceATM = this.currentAtm.getCash() - this.withdrawAmount;
                this.currentAtm.setCash(currentBalanceATM);    // tru tien ATM
                this.currentAtm.setQuanity50(this.currentAtm.getQuanity50()-cash[0]);// tru luong tien ATM
                this.currentAtm.setQuanity100(this.currentAtm.getQuanity100()-cash[1]);
                this.currentAtm.setQuanity200(this.currentAtm.getQuanity200()-cash[2]);
                this.currentAtm.setQuanity500(this.currentAtm.getQuanity500()-cash[3]);   
                // tao giao dich withdraw
                int transQuanity=1;
                for(Bank i : bank)
                {
                    for(Atm k : i.getAtm())
                    {
                        for(WithdrawTransaction j: k.getWithdrawTransactions())
                        {
                            if(j.getAtmcardnumber().equals(currentCustomer.getAtmCardnumber()))
                                    transQuanity++;              
                        }
                    }
                }

                String TransID = currentCustomer.getIdCard()+"with"+transQuanity;
                String TransTime = LocalDateTime.now().getDayOfMonth() + "-" + LocalDateTime.now().getMonth()+ "-" +LocalDateTime.now().getYear()+ " "
                                                + LocalDateTime.now().getHour()+ ":" +LocalDateTime.now().getMinute()+ ":" +LocalDateTime.now().getSecond();
                String TransContent = "Thẻ "+ this.currentCustomer.getAtmCardnumber() +" rút: " + this.withdrawAmount +  " VND vào lúc "+ TransTime + "@" ;
                WithdrawTransaction a = new WithdrawTransaction(this.currentAtm.getAtmID(), 
                                                                                                                                    TransID, this.currentCustomer.getAtmCardnumber(), 
                                                                                                                                     TransTime, withdrawAmount, TransContent);
                currentAtm.getWithdrawTransactions().add(a);
                addWithdrawTrans(a);
                updateATM(this.currentAtm);
                updateCustomer(currentCustomer);
                ReceiveForm receiveForm = new  ReceiveForm(this, rootPaneCheckingEnabled, "withdraw");   
                receiveForm.setVisible(true);    // hien thi ket qua 
                pnWithdraw2.setVisible(false);
            }else{
                JOptionPane.showMessageDialog(this, "Số dư còn lại không đủ!");
                this.pnMain.setVisible(true);
                this.pnWithdraw2.setVisible(false);
                withdrawAmount = -1;
                cash[0] = -1;cash[1] = -1;cash[2] = -1;cash[3] = -1;
        fee = 0f;
            }
        }
    }//GEN-LAST:event_btnnobillActionPerformed

    private void btnNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNoActionPerformed
        JOptionPane.showMessageDialog(pnContinue, "Bạn nhận được thẻ ATM: "+
            currentCustomer.getName()+" "+ currentCustomer.getAtmCardnumber());
        resetATM();
    }//GEN-LAST:event_btnNoActionPerformed

    private void btnYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnYesActionPerformed
        this.pnContinue.setVisible(false);
        this.pnMain.setVisible(true);
        withdrawAmount = -1;
        transferAmount = -1;
        currentCustomerTrans = null;
        cash[0] = -1;cash[1] = -1;cash[2] = -1;cash[3] = -1;
        fee = 0f;
        printBill = false;
        newPIN = "";
    }//GEN-LAST:event_btnYesActionPerformed

    private void btncancel8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancel8ActionPerformed
        this.pnMain.setVisible(true);
        this.pnCheckbalance1.setVisible(false);
    }//GEN-LAST:event_btncancel8ActionPerformed
// hàm thực thi vấn tin
    private void btnnobill1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnobill1ActionPerformed
        if(reloadData()){
            printBill = false;
            // tao ra giao dich checkbalance
            int transQuanity=1;
            for(Bank i : bank)
            {
                for(Atm k : i.getAtm())
                {
                    for(CheckBalanceTransaction j: k.getCheckBalanceTransactions())
                    {
                        if(j.getAtmcardnumber().equals(currentCustomer.getAtmCardnumber()))
                            transQuanity++;
                    }
                }
            }
            String TransID = currentCustomer.getIdCard()+"check"+transQuanity;
            String TransTime = LocalDateTime.now().getDayOfMonth() + "-" + LocalDateTime.now().getMonth()+ "-" +LocalDateTime.now().getYear()+ " "
                                                            + LocalDateTime.now().getHour()+ ":" +LocalDateTime.now().getMinute() + ":" +LocalDateTime.now().getSecond();
            String TransContent ="Thẻ "+ this.currentCustomer.getAtmCardnumber() 
                                                            +" kiểm tra số dư: " + this.currentCustomer.getBalance() 
                                                            +  "VND vào lúc "+ TransTime +"@";
            CheckBalanceTransaction a = new CheckBalanceTransaction(this.currentAtm.getAtmID(), 
                                                                                               TransID, this.currentCustomer.getAtmCardnumber(), 
                                                                                              TransTime, this.currentCustomer.getBalance(), TransContent);
            // them doi tuong
            currentAtm.getCheckBalanceTransactions().add(a);
            addCheckBalanceTrans(a);
            updateATM(this.currentAtm);
            updateCustomer(currentCustomer);
            ReceiveForm receiveform = new ReceiveForm(this, rootPaneCheckingEnabled, "checkbalance");
            receiveform.setVisible(true);
            this.pnCheckbalance1.setVisible(false);
        }
    }//GEN-LAST:event_btnnobill1ActionPerformed

    private void btnprintbill1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprintbill1ActionPerformed
        if(reloadData()){
        printBill = true;
        if(this.currentCustomer.getBalance()>=51500){
        this.currentCustomer.setBalance(this.currentCustomer.getBalance() - 1500);
        // tao ra giao dich checkbalance
        int transQuanity=1;
        for(Bank i : bank)
        {
            for(Atm k : i.getAtm())
            {
                for(CheckBalanceTransaction j: k.getCheckBalanceTransactions())
                {
                    if(j.getAtmcardnumber().equals(currentCustomer.getAtmCardnumber()))
                        transQuanity++;
                }
            }
        }
        String TransID = currentCustomer.getIdCard()+"check"+transQuanity;
        String TransTime = LocalDateTime.now().getDayOfMonth() + "-" + LocalDateTime.now().getMonth()+ "-" 
                                        +LocalDateTime.now().getYear()+ " "
                                        + LocalDateTime.now().getHour()+ ":" +LocalDateTime.now().getMinute()+":" +LocalDateTime.now().getSecond();
        String TransContent = "Thẻ "+ this.currentCustomer.getAtmCardnumber() 
                                                        +" kiểm tra số dư: " + this.currentCustomer.getBalance() 
                                                        +  "VND vào lúc "+ TransTime +". Phí in hóa đơn: 1.500VNĐ"+"@";
        CheckBalanceTransaction a = new CheckBalanceTransaction(this.currentAtm.getAtmID(), 
                                                                                           TransID, this.currentCustomer.getAtmCardnumber(), 
                                                                                          TransTime, this.currentCustomer.getBalance(), TransContent);
        // them doi tuong
        currentAtm.getCheckBalanceTransactions().add(a);
        addCheckBalanceTrans(a);
        updateATM(this.currentAtm);
        updateCustomer(currentCustomer);
        ReceiveForm receiveform = new ReceiveForm(this, rootPaneCheckingEnabled, "checkbalance");
        receiveform.setVisible(true);
        this.pnCheckbalance1.setVisible(false);
        }else
        {
            JOptionPane.showMessageDialog(this, "Tài khoản không đủ tiền để in hóa đơn!");
        }
        }
    }//GEN-LAST:event_btnprintbill1ActionPerformed

    private void btncancel11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancel11ActionPerformed
        this.pnMain.setVisible(true);
        txtOldPIN.setText("");
        txtNewPIN1.setText("");
        txtNewPIN2.setText("");
        this.pnChangePIN.setVisible(false);
    }//GEN-LAST:event_btncancel11ActionPerformed

    private void btnChangePINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangePINActionPerformed
        String oldPIN = String.valueOf(txtOldPIN.getPassword());
        String newPIN1 = String.valueOf(txtNewPIN1.getPassword());
        String newPIN2 = String.valueOf(txtNewPIN2.getPassword());
        if(oldPIN.equals(this.currentCustomer.getAtmPin()) ){
            if(newPIN1.equals(newPIN2)&&newPIN1.length()==6){
                try {
                        int pin = Integer.parseInt(newPIN1);
                        newPIN = newPIN1;
                        txtOldPIN.setText("");
                        txtNewPIN1.setText("");
                        txtNewPIN2.setText("");
                        this.pnChangePIN1.setVisible(true);
                        this.pnChangePIN.setVisible(false);            
                } catch (Exception e) {
                     JOptionPane.showMessageDialog(this, "Mã PIN mới không hợp lệ!");
                    txtOldPIN.setText("");
                    txtNewPIN1.setText("");
                    txtNewPIN2.setText("");
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Mã PIN mới không hợp lệ!");
                txtOldPIN.setText("");
                txtNewPIN1.setText("");
                txtNewPIN2.setText("");
            }
        }
        else{
            JOptionPane.showMessageDialog(this, "Mã PIN hiện tại không chính xác!");
            txtOldPIN.setText("");
            txtNewPIN1.setText("");
            txtNewPIN2.setText("");
        }
    }//GEN-LAST:event_btnChangePINActionPerformed
// thực thi giao dịch đổi PIN
    private void btnprintbill4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprintbill4ActionPerformed
        if(reloadData()){
        printBill = true;
        if(this.currentCustomer.getBalance()>=51500){
            this.currentCustomer.setBalance(this.currentCustomer.getBalance() - 1500);
            // tao ra giao dich changepin
            int transQuanity=1;
            for(Bank i : bank)
            {
                for(Atm k : i.getAtm())
                {
                    for(ChangePinTransaction j: k.getChangePinTransactions())
                    {
                        if(j.getAtmcardnumber().equals(currentCustomer.getAtmCardnumber()))
                            transQuanity++;
                    }
                }
            }
            String TransID = currentCustomer.getIdCard()+"check"+transQuanity;
            String TransTime = LocalDateTime.now().getDayOfMonth() + "-" + LocalDateTime.now().getMonth()+ "-" 
                                            +LocalDateTime.now().getYear()+ " "
                                            + LocalDateTime.now().getHour()+ ":" +LocalDateTime.now().getMinute()+":" +LocalDateTime.now().getSecond();
            String TransContent = "Thẻ "+currentCustomer.getAtmCardnumber() +" đổi mã pin từ : "+currentCustomer.getAtmPin() 
                                                              + " sang " + newPIN +  " vào lúc "+ TransTime+ ". Phí in hóa đơn: 1.500VNĐ" + "@";
            ChangePinTransaction  a = new ChangePinTransaction(this.currentAtm.getAtmID(), 
                                                                                               TransID, this.currentCustomer.getAtmCardnumber(), 
                                                                                              TransTime, this.currentCustomer.getAtmPin(), newPIN, TransContent);
            // them doi tuong
            this.currentCustomer.setAtmPin(newPIN);
            currentAtm.getChangePinTransactions().add(a);
            addChangePinTrans(a);
            updateATM(this.currentAtm);
            updateCustomer(currentCustomer);
            ReceiveForm receiveForm = new ReceiveForm(this, rootPaneCheckingEnabled, "changepin");
            receiveForm.setVisible(true);
            this.pnChangePIN1.setVisible(false);
        }else{
            JOptionPane.showMessageDialog(this, "Tài khoản không đủ tiền để in hóa đơn!");
        }
        }
    }//GEN-LAST:event_btnprintbill4ActionPerformed

    private void btnnobill4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnobill4ActionPerformed
        if(reloadData()){
        printBill = false;
        // tao ra giao dich changepin
        int transQuanity=1;
        for(Bank i : bank)
        {
            for(Atm k : i.getAtm())
            {
                for(ChangePinTransaction j: k.getChangePinTransactions())
                {
                    if(j.getAtmcardnumber().equals(currentCustomer.getAtmCardnumber()))
                        transQuanity++;
                }
            }
        }
        String TransID = currentCustomer.getIdCard()+"change"+transQuanity;
        String TransTime = LocalDateTime.now().getDayOfMonth() + "-" + LocalDateTime.now().getMonth()+ "-" 
                                        +LocalDateTime.now().getYear()+ " "
                                        + LocalDateTime.now().getHour()+ ":" +LocalDateTime.now().getMinute()+":" +LocalDateTime.now().getSecond();
        String TransContent = "Thẻ "+currentCustomer.getAtmCardnumber() +" đổi mã pin từ : "+currentCustomer.getAtmPin() 
                                                          + " sang " + newPIN +  " vào lúc "+ TransTime+ "@";
        ChangePinTransaction  a = new ChangePinTransaction(this.currentAtm.getAtmID(), 
                                                                                           TransID, this.currentCustomer.getAtmCardnumber(), 
                                                                                          TransTime, this.currentCustomer.getAtmPin(), newPIN, TransContent);
        // them doi tuong
        this.currentCustomer.setAtmPin(newPIN);
        currentAtm.getChangePinTransactions().add(a);
        addChangePinTrans(a);
        updateATM(this.currentAtm);
        updateCustomer(currentCustomer);
        ReceiveForm receiveForm = new ReceiveForm(this, rootPaneCheckingEnabled, "changepin");
        receiveForm.setVisible(true);
        this.pnChangePIN1.setVisible(false);
        }
    }//GEN-LAST:event_btnnobill4ActionPerformed

    private void btncancel12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancel12ActionPerformed
        this.pnMain.setVisible(true);
        this.pnChangePIN1.setVisible(false);
        newPIN = "";
    }//GEN-LAST:event_btncancel12ActionPerformed

    private void btnChangepasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangepasswordActionPerformed
        this.pnMain.setVisible(false);
        this.pnChangePIN.setVisible(true);
    }//GEN-LAST:event_btnChangepasswordActionPerformed

    private void btncancel5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancel5ActionPerformed
        this.pnMain.setVisible(true);
        this.pnTransfer1.setVisible(false);
        txtAmount.setText("");
        txtCardnumber.setText("");
    }//GEN-LAST:event_btncancel5ActionPerformed

    private void btnenterpassword1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnenterpassword1ActionPerformed
    if(reloadData()){
    String STK = txtCardnumber.getText();
    String amount = txtAmount.getText();
    boolean findReceive = false;
    if(amount.length()> 0)
    {
        try 
        {
           int test = Integer.parseInt(amount.toString());
           for ( Bank i: bank )
           {
               for( Customer k : i.getCustomer())
               {
                   if(k.getAtmCardnumber().equals(STK.toString())&&!k.getAtmCardnumber().equals(currentCustomer.getAtmCardnumber())){
                       if (k.isAtmStatus()) {
                           findReceive = true;
                           if(test<= 30000000 && test > 0 )
                           {
                               int transamount = test;
                               float fee1 = 0f;
                               if(!currentBank.getName().equals(i.getName()))
                               {
                                   fee1 = transamount*currentBank.getTransferfeeOut();
                               }
                               else{
                                   fee1 = transamount*currentBank.getTransferfeeIn();
                               }
                               if(currentCustomer.getBalance() >= transamount +(int)fee1 + 50000 )
                               {
                                   currentCustomerTrans = k;
                                   transferAmount = transamount;
                                   fee = fee1;
                                   txtAmount.setText("");
                                   txtCardnumber.setText("");
                                   this.pnTransfer1.setVisible(false);
                                   this.pnTransfer2.setVisible(true);
                               }
                               else{
                                   JOptionPane.showMessageDialog(this, "Tài khoản không đủ tiền!");
                                     txtAmount.setText("");
                                    txtCardnumber.setText("");
                               }
                           }
                           else{
                                JOptionPane.showMessageDialog(this, "Gửi tối thiểu 1VNĐ và gửi tối đa 30000000VNĐ!");
                                txtAmount.setText("");
                                txtCardnumber.setText("");
                           }
                       }
                       else{
                           JOptionPane.showMessageDialog(this, "Thẻ nhận bị khóa!");
                            txtAmount.setText("");
                            txtCardnumber.setText("");
                       }
                       break;   
                   }
               }
           }
           if(!findReceive)
           {
               JOptionPane.showMessageDialog(this, "Thẻ nhận không hợp lệ!");
               txtAmount.setText("");
               txtCardnumber.setText("");
           }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Số tiền không hợp lệ!");
                txtAmount.setText("");
                txtCardnumber.setText("");
        }
       }else{
        JOptionPane.showMessageDialog(this, "Vui lòng nhập số tiền gửi!");
    }
    }
    }//GEN-LAST:event_btnenterpassword1ActionPerformed

    private void btncancel9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancel9ActionPerformed

         currentCustomerTrans = null;
         transferAmount = -1;
         fee = 0f;
         this.pnMain.setVisible(true);
         this.pnTransfer2.setVisible(false);
    }//GEN-LAST:event_btncancel9ActionPerformed
// hàm thực thi chuyển tiền
    private void btnnobill2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnobill2ActionPerformed
        if(reloadData()){
            if(currentCustomerTrans.isAtmStatus() == true && currentCustomer.getBalance() >=(transferAmount +(int)fee + 50000))
            {
                printBill = false;
                this.currentCustomer.setBalance(this.currentCustomer.getBalance() - transferAmount - (int)fee);
                this.currentCustomerTrans.setBalance(this.currentCustomerTrans.getBalance() + transferAmount );
                // them tien nguoi nhan bot tien nguoi gui
                int transQuanity=1;
                for(Bank i : bank)
                {
                    for(Atm k : i.getAtm())
                    {
                        for(TransferTransaction j: k.getTransferTransactions())
                        {
                            if(j.getAtmcardnumber().equals(currentCustomer.getAtmCardnumber()))
                                transQuanity++;
                        }
                    }
                }
                String TransID = currentCustomer.getIdCard()+"trans"+transQuanity;
                String TransTime = LocalDateTime.now().getDayOfMonth() + "-" + LocalDateTime.now().getMonth()+ "-" 
                                                +LocalDateTime.now().getYear()+ " "
                                                + LocalDateTime.now().getHour()+ ":" +LocalDateTime.now().getMinute()+":" +LocalDateTime.now().getSecond();
                String TransContent =  "Thẻ "+ currentCustomer.getAtmCardnumber() +" chuyển khoản cho : "
                                                                   +currentCustomerTrans.getAtmCardnumber() + " " + transferAmount +  " VND vào lúc "+ TransTime  + "@";
                TransferTransaction  a = new TransferTransaction(this.currentAtm.getAtmID(), 
                                                                                                   TransID, this.currentCustomer.getAtmCardnumber(), 
                                                                                                  TransTime, transferAmount, currentCustomerTrans.getAtmCardnumber(), TransContent);
                // them doi tuong
                currentAtm.getTransferTransactions().add(a);
                addTransferTrans(a);
                updateATM(this.currentAtm);
                updateCustomer(currentCustomer);
                updateCustomer(currentCustomerTrans);
                // hien thi receive
                ReceiveForm receiveForm = new ReceiveForm(this, rootPaneCheckingEnabled, "transfer");
                receiveForm.setVisible(true);
                this.pnTransfer2.setVisible(false);
            }else{
                JOptionPane.showMessageDialog(this, "Thẻ gửi hoặc thẻ nhận không đủ điều kiện!");
                currentCustomerTrans = null;
                transferAmount = -1;
                fee = 0f;
                this.pnMain.setVisible(true);
                this.pnTransfer2.setVisible(false);
            }
        }
    }//GEN-LAST:event_btnnobill2ActionPerformed

    private void btnprintbill2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprintbill2ActionPerformed
        if(reloadData()){
            if(currentCustomerTrans.isAtmStatus() == true && currentCustomer.getBalance() >=(transferAmount +(int)fee + 50000))
            {
                printBill = true;
                if(this.currentCustomer.getBalance()>= ( transferAmount + (int)fee + 51500)){
                    this.currentCustomer.setBalance(this.currentCustomer.getBalance() - transferAmount - (int)fee);
                    this.currentCustomerTrans.setBalance(this.currentCustomerTrans.getBalance() + transferAmount );
                    // them tien nguoi nhan bot tien nguoi gui
                    // tao ra giao dich transfer
                    int transQuanity=1;
                    for(Bank i : bank)
                    {
                        for(Atm k : i.getAtm())
                        {
                            for(TransferTransaction j: k.getTransferTransactions())
                            {
                                if(j.getAtmcardnumber().equals(currentCustomer.getAtmCardnumber()))
                                    transQuanity++;
                            }
                        }
                    }
                    String TransID = currentCustomer.getIdCard()+"trans"+transQuanity;
                    String TransTime = LocalDateTime.now().getDayOfMonth() + "-" + LocalDateTime.now().getMonth()+ "-" 
                                                    +LocalDateTime.now().getYear()+ " "
                                                    + LocalDateTime.now().getHour()+ ":" +LocalDateTime.now().getMinute()+":" +LocalDateTime.now().getSecond();
                    String TransContent =  "Thẻ "+ currentCustomer.getAtmCardnumber() +" chuyển khoản cho : "
                                                                       +currentCustomerTrans.getAtmCardnumber() + " " + transferAmount +  " VND vào lúc "+ TransTime + ". Phí in hóa đơn 1.500VNĐ" + "@";
                    TransferTransaction  a = new TransferTransaction(this.currentAtm.getAtmID(), 
                                                                                                       TransID, this.currentCustomer.getAtmCardnumber(), 
                                                                                                      TransTime, transferAmount, currentCustomerTrans.getAtmCardnumber(), TransContent);
                    // them doi tuong
                    currentAtm.getTransferTransactions().add(a);
                    addTransferTrans(a);
                    updateATM(this.currentAtm);
                    updateCustomer(currentCustomer);
                    updateCustomer(currentCustomerTrans);
                    // hien thi receive
                    ReceiveForm receiveForm = new ReceiveForm(this, rootPaneCheckingEnabled, "transfer");
                    receiveForm.setVisible(true);
                    this.pnTransfer2.setVisible(false);
                }else
                {
                    JOptionPane.showMessageDialog(this, "Tài khoản không đủ tiền để in hóa đơn!");
                }
            }else{
                JOptionPane.showMessageDialog(this, "Thẻ gửi hoặc thẻ nhận không đủ điều kiện!");
                currentCustomerTrans = null;
                transferAmount = -1;
                fee = 0f;
                this.pnMain.setVisible(true);
                this.pnTransfer2.setVisible(false);
            }
        }
    }//GEN-LAST:event_btnprintbill2ActionPerformed

    private void btncancel10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancel10ActionPerformed
        this.pnMain.setVisible(true);
        this.pnStatement.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_btncancel10ActionPerformed
// thuc thi statement
    private void btnprintbill3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprintbill3ActionPerformed
        if(reloadData()){
        printBill = true;
        if(this.currentCustomer.getBalance()>= 51500){
            this.currentCustomer.setBalance(this.currentCustomer.getBalance() - 1500);
            // tao ra doi tuong statement
            int transQuanity=1;
            for(Bank i : bank)
            {
                for(Atm k : i.getAtm())
                {
                    for(StatementTransaction j: k.getStatementTransaction())
                    {
                        if(j.getAtmcardnumber().equals(currentCustomer.getAtmCardnumber()))
                            transQuanity++;
                    }
                }
            }
            String TransID = currentCustomer.getIdCard()+"state"+transQuanity;
            String TransTime = LocalDateTime.now().getDayOfMonth() + "-" + LocalDateTime.now().getMonth()+ "-" +LocalDateTime.now().getYear()+ " "
                                       + LocalDateTime.now().getHour()+ ":" +LocalDateTime.now().getMinute()+":" +LocalDateTime.now().getSecond();
            String TransContent =  "Thẻ "+ currentCustomer.getAtmCardnumber() +" sao kê vào lúc: "+ TransTime + ". Phí in hóa đơn 1.500VNĐ" + "@";
            StatementTransaction  a = new StatementTransaction(this.currentAtm.getAtmID(), TransID, 
                             this.currentCustomer.getAtmCardnumber(), TransTime, TransContent);
            currentAtm.getStatementTransaction().add(a);
            addStatementTrans(a);
            updateATM(this.currentAtm);
            updateCustomer(currentCustomer);
            ReceiveForm receiveForm = new ReceiveForm(this, rootPaneCheckingEnabled, "statement");
            receiveForm.setVisible(true);
            this.pnStatement.setVisible(false);
        }else
        {
            JOptionPane.showMessageDialog(this, "Tài khoản không đủ tiền để in hóa đơn!");
        }
        }
    }//GEN-LAST:event_btnprintbill3ActionPerformed

    private void btnnobill3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnobill3ActionPerformed
        if(reloadData()){
            printBill = false;
           // tao ra doi tuong statement
            int transQuanity=1;
            for(Bank i : bank)
            {
                for(Atm k : i.getAtm())
                {
                    for(StatementTransaction j: k.getStatementTransaction())
                    {
                        if(j.getAtmcardnumber().equals(currentCustomer.getAtmCardnumber()))
                            transQuanity++;
                    }
                }
            }
            String TransID = currentCustomer.getIdCard()+"state"+transQuanity;
            String TransTime = LocalDateTime.now().getDayOfMonth() + "-" + LocalDateTime.now().getMonth()+ "-" +LocalDateTime.now().getYear()+ " "
                                       + LocalDateTime.now().getHour()+ ":" +LocalDateTime.now().getMinute()+":" +LocalDateTime.now().getSecond();
            String TransContent =  "Thẻ "+ currentCustomer.getAtmCardnumber() +" sao kê vào lúc: "+ TransTime + "@";
            StatementTransaction  a = new StatementTransaction(this.currentAtm.getAtmID(), TransID, 
                             this.currentCustomer.getAtmCardnumber(), TransTime, TransContent);
            currentAtm.getStatementTransaction().add(a);
            addStatementTrans(a);
            updateATM(this.currentAtm);
            updateCustomer(currentCustomer);
            ReceiveForm receiveForm = new ReceiveForm(this, rootPaneCheckingEnabled, "statement");
            receiveForm.setVisible(true);
            this.pnStatement.setVisible(false);   
        }
    }//GEN-LAST:event_btnnobill3ActionPerformed
    public void applyCustomer(Customer a, Bank b)
    {
        this.currentBank =b;
        this.currentCustomer = a;
        this.insertCard.setVisible(false);
        this.bankBanner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/blank.png")));
        this.pnCheckPIN.setVisible(true);
        this.txtCheckPIN.setText(" Xin chào "+ this.currentCustomer.getName()+ ", xin vui lòng nhập mã PIN");
    }
    
    private void cashKindCheck(int a){
        int q50 = 0;
        int q100 = 0;
        int q200 = 0;
        int q500 = 0;
        int atm50 = currentAtm.getQuanity50();
        int atm100 = currentAtm.getQuanity100();
        int atm200 = currentAtm.getQuanity200();
        int atm500 = currentAtm.getQuanity500();
        int amount = a;
        while(atm500 >0 && amount >= 500000)
        {
            atm500--;
            amount -= 500000;
            q500++;      
        }
        while(atm200 >0 && amount >= 200000)
        {
            atm200--;
            amount -= 200000;
            q200++;
        }
        while(atm100 >0 && amount >=100000)
        {
            atm100--;
            amount -= 100000;
            q100++;
        }
        q50 = amount /50000;
        atm50 -= q50;
        amount = 50000*q50 + 100000*q100 + 200000*q200 + 500000*q500;
        if(a == amount && atm50 >=0){
            cash[0] = q50;
            cash[1] = q100;
            cash[2] = q200;
            cash[3] = q500;
        }       
    }
    
    public void applyWithdrawAmount(int a){
        // neu atm du tien va du loai tien
        if(reloadData()){
        if(currentAtm.getCash() >= a)
        {   
            cashKindCheck(a);
            if(cash[0] >= 0 && cash[1] >= 0 && cash[2] >= 0&& cash[3] >= 0)
            {
                if(currentAtm.getOwnerBank().equals(currentBank.getName())){
                    fee = a*currentBank.getWithdrawfeeIn();
                }
                else{
                    fee = a*currentBank.getWithdrawfeeOut();
                }
                // kiem tra tai khoan co du tien hay khong
                if(currentCustomer.getBalance()>= (a + (int)fee + 50000)){
                    this.withdrawAmount = a;
                    this.pnWithdraw1.setVisible(false);
                    this.pnWithdraw2.setVisible(true);
                }
                else{
                    JOptionPane.showMessageDialog(this, "Số dư còn lại không đủ!");
                    this.pnWithdraw1.setVisible(false);
                    this.pnMain.setVisible(true);
                    fee = 0f;
                    cash[0] = -1;cash[1] = -1;cash[2] = -1;cash[3] = -1;
                }
            }
            else{
                 JOptionPane.showMessageDialog(this, "ATM không đủ tiền, xin vui lòng chọn ATM khác!");
                 this.pnWithdraw1.setVisible(false);
                 this.pnMain.setVisible(true);
            }
        }
        else{
            JOptionPane.showMessageDialog(this, "ATM không đủ tiền, xin vui lòng chọn ATM khác!");
            this.pnWithdraw1.setVisible(false);
            this.pnMain.setVisible(true);
        }
        }
    }
    
    public  void continueTransaction(){
        this.pnContinue.setVisible(true);
    }
    
    public  void resetATM(){
        this.pnCheckPIN.setVisible(false);
        this.pnMain.setVisible(false);
        this.pnContinue.setVisible(false);
        this.pnStatement.setVisible(false);
        this.pnWithdraw1.setVisible(false);
        this.pnWithdraw2.setVisible(false);
        this.pnCheckbalance1.setVisible(false);
        this.pnChangePIN.setVisible(false);
        this.pnChangePIN1.setVisible(false);
        this.pnTransfer1.setVisible(false);
        this.pnTransfer2.setVisible(false);
            if(currentAtm.getOwnerBank().equals("TPBank")){
                bankBanner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/tpbankbanner.png")));}
            if(currentAtm.getOwnerBank().equals("BIDV")){
                bankBanner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/bidvbanner.png")));}
            if(currentAtm.getOwnerBank().equals("Agribank")){
                bankBanner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/agribankbanner.png")));}
        currentCustomer =null;
        currentBank = null;
        currentCustomerTrans = null;
        withdrawAmount = -1;
        transferAmount = -1;
        enterPincount = 0;
        cash[0] = -1;cash[1] = -1;cash[2] = -1;cash[3] = -1;
        fee = 0f;
        printBill = false;
        newPIN ="";
        this.insertCard.setVisible(true);
    }
    
    public boolean isPrintBill() {
        return printBill;
    }
    

    public void updateCustomer(Customer cus)
    {
        try {
           Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
           this.conn = DriverManager.getConnection("jdbc:sqlserver://DESKTOP-BHAS501\\SERVER1:1433;databaseName =BankingManagement;user = sa;password = sa;encrypt = false");
            String sql = "UPDATE Customer SET Phone=?, Address=?, PIN =?, Status=?, Balance=?  WHERE  ATMnumber=?";
            PreparedStatement ps = this.conn.prepareStatement(sql);
            ps.setString(1, cus.getPhone());
            ps.setString(2, cus.getAddress());
            ps.setString(3, cus.getAtmPin());
            ps.setBoolean(4, cus.isAtmStatus());
            ps.setLong(5, cus.getBalance());
            ps.setString(6, cus.getAtmCardnumber());
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public void updateATM(Atm atm)
    {
        try {
           Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
           this.conn = DriverManager.getConnection("jdbc:sqlserver://DESKTOP-BHAS501\\SERVER1:1433;databaseName =BankingManagement;user = sa;password = sa;encrypt = false");
            String sql = "UPDATE ATM SET Cash=?, q50=?, q100 =?, q200=?, q500=?, Status=?  WHERE  ATMID=?";
            PreparedStatement ps = this.conn.prepareStatement(sql);
            ps.setInt(1, atm.getCash());
            ps.setInt(2, atm.getQuanity50());
            ps.setInt(3, atm.getQuanity100());
            ps.setInt(4, atm.getQuanity200());
            ps.setInt(5, atm.getQuanity500());
            ps.setBoolean(6, atm.isStatus());
            ps.setString(7, atm.getAtmID());
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public void addChangePinTrans(ChangePinTransaction a)
    {
        try {
           Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
           this.conn = DriverManager.getConnection("jdbc:sqlserver://DESKTOP-BHAS501\\SERVER1:1433;databaseName =BankingManagement;user = sa;password = sa;encrypt = false");
            String sql = "INSERT INTO changepinTransaction(ATMID,TransactionID,ATMnumber,Time,oldPIN, newPIN,[Content]) VALUES (?,?,?,?,?,?,?);";                   
            PreparedStatement ps = this.conn.prepareStatement(sql);
            ps.setString(1, a.getAtmid());
            ps.setString(2, a.getTransactionid());
            ps.setString(3, a.getAtmcardnumber());
            ps.setString(4, a.getTransactiontime());
            ps.setString(5, a.getOldpin());
            ps.setString(6, a.getNewpin());
            ps.setString(7, a.getContent());
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public void addCheckBalanceTrans(CheckBalanceTransaction a)
    {
        try {
           Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
           this.conn = DriverManager.getConnection("jdbc:sqlserver://DESKTOP-BHAS501\\SERVER1:1433;databaseName =BankingManagement;user = sa;password = sa;encrypt = false");
            String sql = "INSERT INTO checkbalanceTransaction(ATMID,TransactionID,ATMnumber,Time,Amount,[Content]) VALUES (?,?,?,?,?,?);";                   
            PreparedStatement ps = this.conn.prepareStatement(sql);
            ps.setString(1, a.getAtmid());
            ps.setString(2, a.getTransactionid());
            ps.setString(3, a.getAtmcardnumber());
            ps.setString(4, a.getTransactiontime());
            ps.setLong(5, a.getAmount());
            ps.setString(6, a.getContent());
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public void addTransferTrans(TransferTransaction a)
    {
        try {
           Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
           this.conn = DriverManager.getConnection("jdbc:sqlserver://DESKTOP-BHAS501\\SERVER1:1433;databaseName =BankingManagement;user = sa;password = sa;encrypt = false");
            String sql = "INSERT INTO transferTransaction(ATMID,TransactionID,ATMnumber,Time,Amount,ATMnumber2,[Content]) VALUES (?,?,?,?,?,?,?);";                   
            PreparedStatement ps = this.conn.prepareStatement(sql);
            ps.setString(1, a.getAtmid());
            ps.setString(2, a.getTransactionid());
            ps.setString(3, a.getAtmcardnumber());
            ps.setString(4, a.getTransactiontime());
            ps.setInt(5, a.getAmount());
            ps.setString(6, a.getAtmcardnumber2());
            ps.setString(7, a.getContent());
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public void addWithdrawTrans(WithdrawTransaction a)
    {
        try {
           Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
           this.conn = DriverManager.getConnection("jdbc:sqlserver://DESKTOP-BHAS501\\SERVER1:1433;databaseName =BankingManagement;user = sa;password = sa;encrypt = false");
            String sql = "INSERT INTO withdrawTransaction(ATMID,TransactionID,ATMnumber,Time,Amount,[Content]) VALUES (?,?,?,?,?,?);";                   
            PreparedStatement ps = this.conn.prepareStatement(sql);
            ps.setString(1, a.getAtmid());
            ps.setString(2, a.getTransactionid());
            ps.setString(3, a.getAtmcardnumber());
            ps.setString(4, a.getTransactiontime());
            ps.setInt(5, a.getAmount());
            ps.setString(6, a.getContent());
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public void addStatementTrans(StatementTransaction a)
    {
        try {
           Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
           this.conn = DriverManager.getConnection("jdbc:sqlserver://DESKTOP-BHAS501\\SERVER1:1433;databaseName =BankingManagement;user = sa;password = sa;encrypt = false");
            String sql = "INSERT INTO statementTransaction(ATMID, TransactionID, ATMnumber, Time, [Content]) VALUES (?,?,?,?,?);";                   
            PreparedStatement ps = this.conn.prepareStatement(sql);
            ps.setString(1, a.getAtmid());
            ps.setString(2, a.getTransactionid());
            ps.setString(3, a.getAtmcardnumber());
            ps.setString(4, a.getTransactiontime());
            ps.setString(5, a.getContent());
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public boolean reloadData(){
        Connection conn = null;
        boolean kt = true;
       try 
       {
           Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
           conn = DriverManager.getConnection("jdbc:sqlserver://DESKTOP-BHAS501\\SERVER1:1433;databaseName =BankingManagement;user = sa;password = sa;encrypt = false");
       }
       catch(ClassNotFoundException|SQLException e ){
           e.printStackTrace();
       }
       
       // gan du lieu
       //Customer
        ArrayList<Customer> customer = new ArrayList<Customer>();
        try {
             PreparedStatement prest = conn.prepareStatement("SELECT * FROM Customer");
             ResultSet rs = prest.executeQuery();
             while(rs.next()){
                 Customer a = new Customer(rs.getString(1), rs.getString(2), rs.getString(3),
                 rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9),
                 rs.getBoolean(10), rs.getString(11), rs.getString(12), rs.getLong(13));
                 customer.add(a);         
                 if(this.currentCustomer!= null && a.getIdCard().equals(this.currentCustomer.getIdCard())){
                     this.currentCustomer = a;
                 }
                 if(this.currentCustomerTrans!= null && a.getIdCard().equals(this.currentCustomerTrans.getIdCard())){
                     this.currentCustomerTrans = a;
                 }
             }
        } catch (Exception e) {
            e.printStackTrace();
        }       
        
        
        // Admin
         ArrayList<Admin> admin = new ArrayList<Admin>();
        try {
             PreparedStatement prest = conn.prepareStatement("SELECT * FROM Admin");
             ResultSet rs = prest.executeQuery();
             while(rs.next()){
                 Admin a = new Admin(rs.getString(1), rs.getString(2), rs.getString(3));
                 admin.add(a);               }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        //statement
        ArrayList<StatementTransaction> statementTransactions = new ArrayList<StatementTransaction>();
        try {
             PreparedStatement prest = conn.prepareStatement("SELECT * FROM statementTransaction");
             ResultSet rs = prest.executeQuery();
             while(rs.next()){
                 StatementTransaction a =  new StatementTransaction(rs.getString(1), rs.getString(2),
                 rs.getString(3), rs.getString(4), rs.getString(5));
                 statementTransactions.add(a);
             }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        //change pin
        ArrayList<ChangePinTransaction> changePinTrans = new ArrayList<ChangePinTransaction>();
        try {
             PreparedStatement prest = conn.prepareStatement("SELECT * FROM changepinTransaction");
             ResultSet rs = prest.executeQuery();
             while(rs.next()){
                 ChangePinTransaction a =  new ChangePinTransaction(rs.getString(1), rs.getString(2),
                 rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7));
                 changePinTrans.add(a);
             }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        
        //check balance
        ArrayList<CheckBalanceTransaction> checkBalanceTrans = new ArrayList<CheckBalanceTransaction>();
        try {
             PreparedStatement prest = conn.prepareStatement("SELECT * FROM checkbalanceTransaction");
             ResultSet rs = prest.executeQuery();
             while(rs.next()){
                 CheckBalanceTransaction a =  new CheckBalanceTransaction(rs.getString(1), rs.getString(2),
                 rs.getString(3), rs.getString(4), rs.getLong(5),rs.getString(6));
                 checkBalanceTrans.add(a);
                 
             }
        } catch (Exception e) {
            e.printStackTrace();
        }        
        
        
        //Transfer
        ArrayList<TransferTransaction> transferTrans = new ArrayList<TransferTransaction>();
        try {
             PreparedStatement prest = conn.prepareStatement("SELECT * FROM transferTransaction");
             ResultSet rs = prest.executeQuery();
             while(rs.next()){
                 TransferTransaction a =  new TransferTransaction(rs.getString(1), rs.getString(2),
                                                                                                rs.getString(3), rs.getString(4),
                                                                                                rs.getInt(5), 
                                                                                                rs.getString(6),rs.getString(7) );
                 transferTrans.add(a);
             }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        
        //withdraw
        ArrayList<WithdrawTransaction> withdrawTrans = new ArrayList<WithdrawTransaction>();
        try {
             PreparedStatement prest = conn.prepareStatement("SELECT * FROM withdrawTransaction");
             ResultSet rs = prest.executeQuery();
             while(rs.next()){
                 WithdrawTransaction a =  new WithdrawTransaction(rs.getString(1), rs.getString(2),
                 rs.getString(3), rs.getString(4), rs.getInt(5), rs.getString(6));
                 withdrawTrans.add(a);
             }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        
        //Atm
        ArrayList<Atm> atm = new ArrayList<Atm>();
        try {
             PreparedStatement prest = conn.prepareStatement("SELECT * FROM ATM");
             ResultSet rs = prest.executeQuery();
             while(rs.next()){
                 String currentAtmid = rs.getString(1).trim();
                 ArrayList<ChangePinTransaction> changepin = new ArrayList<ChangePinTransaction>();
                 ArrayList<CheckBalanceTransaction> checkba = new ArrayList<CheckBalanceTransaction>();
                 ArrayList<TransferTransaction> transfer  = new ArrayList<TransferTransaction>();
                 ArrayList<WithdrawTransaction> withdraw = new ArrayList<WithdrawTransaction>();
                 ArrayList<StatementTransaction> statement = new ArrayList<StatementTransaction>();
                 for(ChangePinTransaction i : changePinTrans)
                 {
                     if(i.getAtmid().equals(currentAtmid)){  changepin.add(i);}
                 }
                 for(CheckBalanceTransaction i : checkBalanceTrans)
                 {
                     if(i.getAtmid().equals(currentAtmid)){  checkba.add(i);}
                 }
                 for(TransferTransaction i : transferTrans)
                 {
                     if(i.getAtmid().equals(currentAtmid)){  transfer.add(i);}
                 }
                 for(WithdrawTransaction i : withdrawTrans)
                 {
                     if(i.getAtmid().equals(currentAtmid)){  withdraw.add(i);}
                 }
                 for(StatementTransaction i : statementTransactions)
                 {
                     if(i.getAtmid().equals(currentAtmid)){  statement.add(i);}
                 }
                 Atm a =  new Atm(rs.getString(1), rs.getString(2), rs.getString(3), 
                         rs.getInt(4), rs.getInt(5), rs.getInt(6), rs.getInt(7), rs.getInt(8), rs.getBoolean(9),
                         changepin,checkba,transfer,withdraw, statement);
                atm.add(a);
                if(this.currentAtm.getAtmID().equals(a.getAtmID())){
                    this.currentAtm = a;
                }
             }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        
        // bank
        ArrayList<Bank> bank = new ArrayList<Bank>();
        try {
             PreparedStatement prest = conn.prepareStatement("SELECT * FROM Bank");
             ResultSet rs = prest.executeQuery();
             while(rs.next()){
                 String currentBankName = rs.getString(1).trim();
                 ArrayList<Customer> cus = new ArrayList<Customer>();
                 ArrayList<Atm> at = new ArrayList<Atm>();
                 ArrayList<Admin> ad  = new ArrayList<Admin>();          
                 for(Customer i : customer )
                 {
                     if(i.getbankName().equals(currentBankName) ){  cus.add(i);}                 
                 }
                 for(Atm i : atm)
                 {
                     if(i.getOwnerBank().equals(currentBankName)){  at.add(i);}                    
                 }
                 for(Admin i : admin)
                 {
                     if(i.getbankName().equals(currentBankName) ){  ad.add(i);}          
                 }            
                 Bank a = new Bank(currentBankName, rs.getFloat(2), rs.getFloat(3), 
                         rs.getFloat(4), rs.getFloat(5), cus, at, ad);
                 bank.add(a);
                 if(this.currentBank!= null &&a.getName().equals(this.currentBank)){
                     this.currentBank = a;
                 }
             }
        } catch (Exception e) {
            e.printStackTrace();
        }
        this.bank = bank;
        if(!this.currentAtm.isStatus())
                    {
                        JOptionPane.showMessageDialog(this, "Xảy ra lỗi bất ngờ, xin quý khách vui lòng chọn ATM khác!");
                        if(currentCustomer!=null){
                            JOptionPane.showMessageDialog(this, "Bạn nhận được thẻ ATM: "+
                            currentCustomer.getName()+" "+ currentCustomer.getAtmCardnumber());
                        }
                        resetATM();
                        int stt = 0;
                        String status = "";
                        firstTime = true;
                        ATMSelect.removeAllItems();
                        this.currentAtm = null;
                        for(Bank i : bank)
                        {
                            ArrayList<Atm> k = i.getAtm();
                            for( Atm j : k)
                            {
                                if(j.isStatus()){
                                    status = "";
                                }
                                else{
                                    status = "(error) ";
                                }
                                stt++;
                                ATMSelect.addItem(status + stt + ". ATM "+ j.getOwnerBank() + " "+ j.getAddress() + " " + j.getAtmID());
                                if(currentAtm == null){
                                    currentAtm = j;
                                    resetATM();
                                    ATMSelect.setSelectedItem(status + stt + ". ATM "+ j.getOwnerBank() + " "+ j.getAddress() + " " + j.getAtmID());
                                }                 
                            }
                        }
                        firstTime = false;
                        kt=false;
                    }
         if(currentCustomer !=null && !this.currentCustomer.isAtmStatus() )
                     {
                        JOptionPane.showMessageDialog(this, "Xảy ra lỗi bất ngờ, tài khoản không khả dụng!");
                        JOptionPane.showMessageDialog(this, "Bạn nhận được thẻ ATM: "+
                        currentCustomer.getName()+" "+ currentCustomer.getAtmCardnumber());
                        resetATM();
                        kt = false;
                     }
        return kt;
    }
    /**
     * @param args the command line arguments
     */

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ATMSelect;
    private javax.swing.JLabel bankBanner;
    private javax.swing.JButton btn100;
    private javax.swing.JButton btn1000;
    private javax.swing.JButton btn3000;
    private javax.swing.JButton btn500;
    private javax.swing.JButton btnCancel1;
    private javax.swing.JButton btnCancelPINcheck;
    private javax.swing.JButton btnChangePIN;
    private javax.swing.JButton btnChangepassword;
    private javax.swing.JButton btnCheckbalance;
    private javax.swing.JButton btnEnterPIN;
    private javax.swing.JButton btnNo;
    private javax.swing.JButton btnStatement;
    private javax.swing.JButton btnTransfer;
    private javax.swing.JButton btnWithdraw;
    private javax.swing.JButton btnYes;
    private javax.swing.JButton btnanother;
    private javax.swing.JButton btncancel10;
    private javax.swing.JButton btncancel11;
    private javax.swing.JButton btncancel12;
    private javax.swing.JButton btncancel5;
    private javax.swing.JButton btncancel6;
    private javax.swing.JButton btncancel7;
    private javax.swing.JButton btncancel8;
    private javax.swing.JButton btncancel9;
    private javax.swing.JButton btnenterpassword1;
    private javax.swing.JButton btnnobill;
    private javax.swing.JButton btnnobill1;
    private javax.swing.JButton btnnobill2;
    private javax.swing.JButton btnnobill3;
    private javax.swing.JButton btnnobill4;
    private javax.swing.JButton btnprintbill;
    private javax.swing.JButton btnprintbill1;
    private javax.swing.JButton btnprintbill2;
    private javax.swing.JButton btnprintbill3;
    private javax.swing.JButton btnprintbill4;
    private javax.swing.JButton insertCard;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel pnChangePIN;
    private javax.swing.JPanel pnChangePIN1;
    private javax.swing.JPanel pnCheckPIN;
    private javax.swing.JPanel pnCheckbalance1;
    private javax.swing.JPanel pnContinue;
    private javax.swing.JPanel pnMain;
    private javax.swing.JPanel pnStatement;
    private javax.swing.JPanel pnTransfer1;
    private javax.swing.JPanel pnTransfer2;
    private javax.swing.JPanel pnWithdraw1;
    private javax.swing.JPanel pnWithdraw2;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtCardnumber;
    private javax.swing.JLabel txtCheckPIN;
    private javax.swing.JPasswordField txtNewPIN1;
    private javax.swing.JPasswordField txtNewPIN2;
    private javax.swing.JPasswordField txtOldPIN;
    private javax.swing.JPasswordField txtPIN;
    private javax.swing.JLabel txtwelcome1;
    private javax.swing.JLabel txtwelcome10;
    private javax.swing.JLabel txtwelcome11;
    private javax.swing.JLabel txtwelcome12;
    private javax.swing.JLabel txtwelcome13;
    private javax.swing.JLabel txtwelcome14;
    private javax.swing.JLabel txtwelcome15;
    private javax.swing.JLabel txtwelcome4;
    private javax.swing.JLabel txtwelcome5;
    private javax.swing.JLabel txtwelcome6;
    private javax.swing.JLabel txtwelcome7;
    private javax.swing.JLabel txtwelcome8;
    private javax.swing.JLabel txtwelcome9;
    // End of variables declaration//GEN-END:variables
}
